\subsection{on-exit Git hook}

\newthought{First}, use a fairly portable Bash shebang, and be safe.\footnote{%
  \bash{-e}xit immediately upon failure, treat \bash{-u}nset variables as an
  error, disable \bash{-f}ile globbing, and fail if any part of a pipeline fails
  (\bash{-o pipefail}).%
}
<<config/taskwarrior/on-exit-git.sh>>=
#! /usr/bin/env bash

set -eufo pipefail
@

Echo commands if running [[<<in debug mode>>]].
\begin{marginfigure}[2em]
  Run [[<<in debug mode>>]] if the environment variable \bash{DEBUG} is
  nonempty.
<<in debug mode>>=
[ -n "${DEBUG:-}" ]
@
\end{marginfigure}
<<config/taskwarrior/on-exit-git.sh>>=
if <<in debug mode>>; then
    set -x
fi
@


\newthought{Don't include} the [[api]] version, [[rc]] file,
or Taskwarrior [[version]].\marginnote{%
  N.B. The positional arguments are formatted as \bash{foo:bar}, where \bash{foo} is
  the name of the argument, and \bash{bar} is the value.%
}

<<extraneous information>>=
api="${1#api:}"
rc="${4#rc:}"
version="${6#version:}"
@ %def api
@ %def rc
@ %def version

Parse and store the values of the arguments, [[args]], [[command]], and [[data]]
directory.
<<config/taskwarrior/on-exit-git.sh>>=
args="${2#args:}"
command="${3#command:}"
data="${5#data:}"

@ %def args
@ %def command
@ %def data


\newthought{Throughout this script}, run [[<<git>>]] as if it were started in
the Taskwarrior [[data]] directory.
\begin{marginfigure}[-1.5em]
<<git>>=
git -C "$data"
@
\end{marginfigure}

\newpage
If [[<<there are no changes>>]], \bash{exit} successfully, printing an
informative message if running in debug mode.
\begin{marginfigure}
  Like \bash{diff}, the following \bash{exit}s with status code \bash{0} if
  there are no differences between the working tree and the index.
<<there are no changes>>=
<<git>> diff --quiet
@
\end{marginfigure}
<<config/taskwarrior/on-exit-git.sh>>=
if <<there are no changes>>; then
    if <<in debug mode>>; then
        echo 'No changes to commit'
    fi
    exit 0
@

If present, stage the changes or die trying.
<<config/taskwarrior/on-exit-git.sh>>=
elif ! <<git>> add -A; then
    echo 'Failed to add files to the index'
    exit 100
@

Try to [[<<commit the changes>>]], or else.
<<config/taskwarrior/on-exit-git.sh>>=
elif ! <<commit the changes>>; then
    echo 'Failed to record changes to the repository'
    exit 101
@

Quietly store the current contents of the index in a new commit along with a log message describing the changes.
<<commit the changes>>=
<<git>> commit -qm "$command: ${args#task $command}"
@
%% \todoir{Teach \bash{finduses} how to parse parameter expansions.}

If running [[<<in debug mode>>]], print a brief summary of the commit.
<<config/taskwarrior/on-exit-git.sh>>=
elif <<in debug mode>>; then
    <<git>> log --oneline -1
fi
@
