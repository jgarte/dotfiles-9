#+TITLE: Literate Emacs Config
#+AUTHOR: Eric Bailey
#+OPTIONS: toc:2
#+HTML_DOCTYPE: html5
#+HTML_HEAD: <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style.min.css">
#+HTML_MATHJAX: align:"left" scale:"100" mathml:t path:"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"
#+INFOJS_OPT: path:org-info.js view:showall toc:nil ltoc:nil tdepth:2 mouse:#dddddd


* Utils
:PROPERTIES:
:tangle: ~/.emacs.d/lisp/init-utils.el
:END:
#+BEGIN_SRC emacs-lisp :padline no :exports none
;;; init-utils --- Global utility functions

;;; Commentary:
;; Based on https://github.com/purcell/emacs.d/blob/c60299cfdd799ccf81eefacb1a6fca1d9d703ff4/lisp/init-utils.el

;;; Code:

#+END_SRC
** Auto-tangle this file
To make the process of writing my Emacs config in a literate style a bit more
pleasant, I add an ~after-save-hook~ to ~(org-babel-tangle)~ it.
#+BEGIN_SRC emacs-lisp
(declare-function org-babel-tangle "ob-tangle")

(defun yurrriq/auto-tangle-literate-config ()
  "Upon saving ~/.emacs.d/README.org, tangle it."
  (when (file-equal-p buffer-file-name "~/.emacs.d/README.org")
    (org-babel-tangle)))

(add-hook 'after-save-hook 'yurrriq/auto-tangle-literate-config)
#+END_SRC

** Evaluating forms after a feature is loaded
As with much of this config, I've taken some convenience functions and macros
from [[http://www.sanityinc.com/about/][Steve Purcell]]'s [[https://github.com/purcell/emacs.d][Emacs config]].

If ~with-eval-after-load~ is bound, we define an alias, ~after-load~, otherwise
we define it as a macro.

#+BEGIN_SRC emacs-lisp
(if (fboundp 'with-eval-after-load)
    (defalias 'after-load 'with-eval-after-load)
  (defmacro after-load (feature &rest body)
    "After FEATURE is loaded, evaluate BODY."
    (declare (indent defun))
    `(eval-after-load ,feature
       '(progn ,@body))))
#+END_SRC

** Adding entries to ~auto-mode-alist~
~add-auto-mode~ provides a handier way to add modes to ~auto-mode-alist~.

#+BEGIN_SRC emacs-lisp :exports none
;;----------------------------------------------------------------------------
;; Handier way to add modes to auto-mode-alist
;;----------------------------------------------------------------------------
#+END_SRC

#+BEGIN_SRC emacs-lisp :padline no
(defun add-auto-mode (mode &rest patterns)
  "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
  (dolist (pattern patterns)
    (add-to-list 'auto-mode-alist (cons pattern mode))))
#+END_SRC

** Faster ~yes-or-no-p~
I don't want to have to type =yes= or =no=, but rather =y= or =no=.
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

#+BEGIN_SRC emacs-lisp :exports none
(provide 'init-utils)
;;; init-utils.el ends here
#+END_SRC
* ELPA
:PROPERTIES:
:tangle:   ~/.emacs.d/lisp/init-elpa.el
:END:
#+BEGIN_SRC emacs-lisp :padline no :exports none
;;; init-elpa.pl -- (m)elpa config

;;; Commentary:
;; Includes portions of https://github.com/purcell/emacs.d/blob/8208151ab23cdcaa7b1027d16d8bd108a3b0dfd6/lisp/init-elpa.el

;;; Code:
#+END_SRC
** Set up ~â€‹'package-archives~
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives
             '("melpa-stable" . "http://stable.melpa.org/packages/") t)
(add-to-list 'package-archives
             '("org" . "http://orgmode.org/elpa/") t)
#+END_SRC
** Helper functions
TODO: Give credit.
#+BEGIN_SRC emacs-lisp
(defun require-package (package &optional min-version no-refresh)
  "Install given PACKAGE, optionally requiring MIN-VERSION.
If NO-REFRESH is non-nil, the available package lists will not be
re-downloaded in order to locate PACKAGE."
  (if (package-installed-p package min-version)
      t
    (if (or (assoc package package-archive-contents) no-refresh)
        (package-install package)
      (progn
        (package-refresh-contents)
        (require-package package min-version t)))))

(defun maybe-require-package (package &optional min-version no-refresh)
  "Try to install PACKAGE, and return non-nil if successful.
In the event of failure, return nil and print a warning message.
Optionally require MIN-VERSION.  If NO-REFRESH is non-nil, the
available package lists will not be re-downloaded in order to
locate PACKAGE."
  (condition-case err
      (require-package package min-version no-refresh)
    (error
     (message "Couldn't install package `%s': %S" package err)
     nil)))
#+END_SRC
** Other :shit:
#+BEGIN_SRC emacs-lisp
;; TODO: move this to the top?
(setq package-enable-at-startup nil)
(package-initialize)

(require-package 'fullframe)
(fullframe list-packages quit-window)

(require-package 'cl-lib)
(require 'cl-lib)
#+END_SRC
** Package menu
#+BEGIN_SRC emacs-lisp
(defun sanityinc/set-tabulated-list-column-width (col-name width)
  "Set any column with name COL-NAME to the given WIDTH."
  (cl-loop for column across tabulated-list-format
           when (string= col-name (car column))
           do (setf (elt column 1) width)))

(defun sanityinc/maybe-widen-package-menu-columns ()
  "Widen some columns of the package menu table to avoid truncation."
  (when (boundp 'tabulated-list-format)
    (sanityinc/set-tabulated-list-column-width "Version" 13)
    (let ((longest-archive-name (apply 'max (mapcar 'length (mapcar 'car package-archives)))))
      (sanityinc/set-tabulated-list-column-width "Archive" longest-archive-name))))

(add-hook 'package-menu-mode-hook 'sanityinc/maybe-widen-package-menu-columns)
#+END_SRC
#+BEGIN_SRC emacs-lisp :exports none
(provide 'init-elpa)
;;; init-elpa.el ends here
#+END_SRC
