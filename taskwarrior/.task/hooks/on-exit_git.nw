\documentclass{tufte-handout}

\input{preamble}

\title{Taskwarrior: Git Integration}

\hypersetup{
  pdffitwindow=true,
  pdfstartview={FitH},
  %% pdftitle={Taskwarrior: Git Integration},
  pdfauthor={Eric Bailey <eric@ericb.me>},
  pdfsubject={Git integration for Taskwarrior via post-exit hook},
  pdfkeywords={Taskwarrior, git, bash},
  colorlinks=true,
  linkcolor=ErlangRed,
  urlcolor=ErlangRed
}

\date{%
  July 27, 2019
  \thanks{Last updated \today}
}

\begin{document}
\maketitle
@

\listoftodos[To-Do]

\begin{abstract}
  \todoio{Describe Taskwarrior hooks, specifically this one.}
\end{abstract}

\section{Front matter}

Use a fairly portable Bash shebang.

<<*>>=
#! /usr/bin/env bash

@


Be safe.

\todoo{Provide rationale and description of each option.}
<<*>>=
set -eufo pipefail

@


\section{Argument parsing}

\begin{marginfigure}
  I don't care about the \bash{api} version, \bash{rc} file, or Taskwarrior
  \bash{version}.

  \begin{minted}{bash}
    api="${1#api:}"
    rc="${4#rc:}"
    version="${6#version:}"
  \end{minted}
\end{marginfigure}

I only care about the \bash{args}, \bash{command}, and \bash{data} directory.

<<*>>=
args="${2#args:}"
command="${3#command:}"
data="${5#data:}"

@ %def args
@ %def command
@ %def data


If [[<<there are no changes>>]] don't commit anything, and \bash{exit}
successfully, printing an informative message if [[<<DEBUG is set>>]].

\begin{marginfigure}
<<there are no changes>>=
<<git>> diff --quiet
@

<<DEBUG is set>>=
[ -n "${DEBUG:-}" ]
@
\end{marginfigure}

<<*>>=
if <<there are no changes>>; then
    if <<DEBUG is set>>; then
        echo 'No changes to commit'
    fi
    exit 0
fi

@


\section{Git integration}

\begin{marginfigure}
  Run [[git]] as if it were started in the Taskwarrior data directory.
<<git>>=
git -C "$data" -C "$data"
@
\end{marginfigure}


If present, [[<<stage the changes>>]] or die trying.
\begin{marginfigure}
<<stage the changes>>=
<<git>> add -A
@
\end{marginfigure}

<<*>>=
if ! <<stage the changes>>; then
    echo 'Failed to add files to the index'
    exit 100
fi

@


Try to [[<<commit the changes>>]].
\begin{marginfigure}
  Quietly store the current contents of the index in a new commit along with a
  log [[<<message>>]] describing the changes.
<<commit the changes>>=
<<git>> commit -qm "<<message>>"
@

<<message>>=
$command: ${args#task $command }
@
\todoir{Teach \bash{finduses} how to parse parameter expansions.}
\end{marginfigure}


<<*>>=
if ! <<commit the changes>>; then
    echo 'Failed to record changes to the repository'
    exit 101
fi

@


If [[<<DEBUG is set>>]], print a brief summary of the commit.
<<*>>=
if <<DEBUG is set>>; then
    <<git>> log --oneline -1
fi
@

%% \newpage
\input{postamble}

\end{document}
